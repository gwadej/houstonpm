[% WRAPPER writeup_wrap.tt2
    title='Summary of October 2018 Presentation'
    year=2018
%]
      <h1>Monolithic vs Microservice: Can Davids Really Take Down Goliath?</h1>
<p>Robert Stone presented a comparison between two different styles of architecture: the monolith and microservices.
This presentation was focused on convincing a company of the benefits of changing architectures.</p>

<h2>Monolith</h2>

<p>He began by describing what he means by the monolithic style.
In a monolith, all of the components of the system work closely together.
These components are written in the same language, using the same frameworks.
They are pretty tightly coupled.
The monolith must handle the entire operation of whatever task we are trying to perform.
It must also act independently of other applications in the company.</p>

<p>Monoliths are not all bad. Robert described a number of advantages:</p>

<ul>
<li>Faster early development
<ul>
<li>Single codebase</li>
<li>You only need to implement any boilplate once</li>
</ul></li>
<li>Easier to test
<ul>
<li>Especially end-to-end integration tests</li>
</ul></li>
<li>Low communication cost
<ul>
<li>All components are internal</li>
</ul></li>
</ul>

<p>On the other hand, monoliths have some definite disadvantages.</p>

<ul>
<li>Deployment is high-risk
<ul>
<li>Any deploy risks everything</li>
<li>The impact of changes is hard to localize</li>
<li>Harder to leverage <abbr title="Continuous Integration">CI</abbr>/<abbr title="Continuous Deployment">CD</abbr></li>
</ul></li>
<li>More expensive to maintain
<ul>
<li>Larger codebase</li>
<li>Potentially higher <em>Bus Factor</em></li>
<li>Steep learning curve</li>
<li>Longer onboarding</li>
</ul></li>
<li>Difficult to scale
<ul>
<li>Competition for resources</li>
<li>Horizontal scaling requires full duplication</li>
</ul></li>
</ul>

<h2>Microservices</h2>

<p>Then, Robert went on to describe a Microservice architecture.</p>

<ul>
<li>Containers
<ul>
<li>Separate out infrastructure concerns with multiple applications</li>
<li>Docker</li>
</ul></li>
<li>Well-defined interfaces for communication between parts</li>
<li>Services handle the actual functionality</li>
<li>Persisent Data Store
<ul>
<li>Database</li>
<li>Filesystem</li>
</ul></li>
<li>Third Party Integrations
<ul>
<li>Abstract and encapsulate standard functionality</li>
</ul></li>
</ul>

<p>He did not shy away from listing some of the disadvantages of microservices.</p>

<ul>
<li>Higher initial development cost
<ul>
<li>Testing requires mocking to test only one service at a time</li>
<li>More moving parts</li>
</ul></li>
<li>More complex infrastructure
<ul>
<li>Multiple containers required</li>
<li>Additional administration and monitoring</li>
</ul></li>
<li>Higher level of architecture required
<ul>
<li>More thought/time needs to be applied to separating functionality</li>
</ul></li>
<li>Communication between services
<ul>
<li>Latency, etc.</li>
</ul></li>
<li>Strictly enforced interfaces</li>
</ul>

<p>On the flip side, he described a number of advantages as well.</p>

<ul>
<li>Low-risk deployments
<ul>
<li>Isolated functionality</li>
<li>Fault tolerance</li>
<li>Frequent, small releases
<ul>
<li>Leading to more feaures, faster</li>
</ul></li>
</ul></li>
<li>Easier to maintain
<ul>
<li>Isolated/decoupled services</li>
<li>Better organized and easier to understand</li>
<li>Each service can use the best technologies
<ul>
<li>and can change separately from other services</li>
</ul></li>
</ul></li>
<li>Efficient to scale
<ul>
<li>Horizontal scaling of only needed services</li>
<li>Isolated resources</li>
</ul></li>
<li>Code reusability
<ul>
<li>Authentication is authentication</li>
<li>Decomposition of functionality</li>
</ul></li>
<li>Speed of development
<ul>
<li>Easier to parallelize</li>
</ul></li>
</ul>

<h2>Migration Strategy</h2>

<p>Obviously, changing from one approach to another cannot be accomplished instantaneously.
There must be a migration strategy.</p>

<p>Robert recommended a feature-driven approach.
Convert one piece at a time.
The order of conversion should bde driven by business priorities.</p>

<p>To mitigate the risks of a change-over, you should not just <em>flip the switch</em>, turning off the old solution and turn on the new one.
A safer approach is to run the new functionality in parallel with the existing functionality.
That allows you to compare the two on production data and resolve any inconsistencies.
You can then retire the old functionality when the business is satisfied.
Done correctly, this allows for a ramp up period.
Aim for some early (and fast) wins.
You can deliver value while ramping up.</p>

<h2>Final Considerations</h2>

<p>When comparing the two archiitectural approaches there are a number of dimensions to consider.</p>

<ul>
<li>Time
<ul>
<li>How long to develop an <abbr title="Minimal Viable Product">MVP</abbr>?</li>
<li>How long to add new features?</li>
<li>How long to deploy new releases?</li>
</ul></li>
<li>Risk Tolerance
<ul>
<li>What is the cost of an outage?</li>
</ul></li>
<li>Team Size
<ul>
<li>Do you have enough members to parallel development?</li>
<li>What are the specific skills and talents on your team?</li>
</ul></li>
</ul>

<h2>Audience Discussion</h2>

<p>After the talk, the audience had some commentary.
They suggested that containers are not a requirement for the microservices approach.
Removing that <em>requirement</em> might make converting somewhat easier.
It was also suggested that the advantages of microservices that we presented are possible, but not guaranteed.
It still requires work.
These advantages are not automatic.</p>

<p>The overall consensus seemed to be that the presentation was really good, but could use a little tweaking.</p>
      <p>We had 9 people attending this month. As always, we'd like to thank
        HostGator, LLC for providing the meeting space and food for the group.</p>
[% END -%]
